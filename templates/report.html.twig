{% extends "base.html.twig" %}

{% block title %}REPORTS{% endblock %}

{% block body %}
    <div class=blocky>
    <h1> Report page </h1>
    <h2 id="kmom01">kmom01</h2>
    <p>
        Jag har gjort rätt mycket objektorienterad programmering i andra programmeringsspråk tidigare, bl.a. i C språk
        Jag har även jobbat med klasser i python. Så grunden med klasser har jag koll på. 

        För att jobba med klasser och objekt måste man förstå skillnaden mellan public, private och protected. Där public 
        gör funktioner och variabler tillgängliga utanför klassen vilket också gör dem sårbara. I private kan de bara accessas
        inuti klassen. Då är de säkra från förändringar som kommer utanför klassen. Om en variabel inte har korrekt värde 
        så vet man att den har ändras ifrån klassen och det gör det lättare att felsöka men chansen att det händer har också 
        reducerats. Med protected så finns de tillgängliga till andra klasser genom arv men då inte helt åtkommliga då de måste
        vara sammankopplade via arv. Det kan också vara bra att ha koll på autoloader. Den kan användas istället för require
        och invlude för att göra saker åtkommliga när det behövs. Konstruktorer är också bra att ha koll på då vi kan 
        skapa instanser av klasser enkelt och smidigt med hjälp av dem. 

        För någon som tycker om språk och grammtik tycker jag att delen i "PHP the right way" om internationalization och localization
        var intressant. Hur man gör för att skapa kod som enkelt kan översättas och fungera i olika mänskliga spårk med
        olika strukturer och helt skild grammatik.

        Koden och strukturen till uppgiften har varit förvirrande tycker jag. Det är möjligt att jag inte haft helt tillräckligt
        med tid för att förstå den då det krånglade med php installationen för mig. Jag vet med mig att det brukar ta ett tag innan 
        man är bekväm i nya miljöer. 

        Min TIL är att det är bra att hålla koll på kodstrukturen innan man börjar skapa filer. 
    </p>
    
    <h2 id="kmom02">kmom02</h2>
    <p>
        Min lösning består av 4 klasser, ett arv och två kompositioner. Jag gjorde först kort med ascii symboler för
        klöver, hjärter, spader och ruter och deras värden med A som ess, J som knekt, Q som dam och K som kung
        och resterande som siffort. Sedan gjorde jag setValue() och setSuit för att få random kort men sedan detValue()
        och detSuit() för att skapa specifika kort som sedan användes för att skapa en fullständig kortlek. Jag sammankopplade
        en shuffle som går igenom alla positioner i arrayen och byter plats med ett random annan position i arrayen. Sedan skapade 
        jag en sort() funktion som är en klassisk bubble sort för att sortera korten. Jag gjorde sedan en draw card och en draw card many
        som drar kort från början av leken. För att ta bort kort ur leken ersattes dem med tomma kort. Sedan skapade jag 
        Graphic card som har ascii symboler för hela kort. 

        Förbättringar skulle vara att kunna ta bort kort från arrayen helt inte bara ersätta dem och sedan finns
        det bättre sorteringsmetoder än bubble sort även fast det kankse inte spelar så stor roll när kortleken 
        aldrig överstiger 52 kort som ska sorteras. 

        Min TIL är att det går att kopiera in alla ascii symboler i VS code istället för att använda deras koder.

        Arv betyder att en klass får alla egenskaper från klassen den ärver från och kan skapa egna egenskaper för 
        att utöka den ursprungliga klassen. Komposition är en samling objekt från en annan klass som då hör ihop. Trait
        är en samlig kod som kan användas i flera klasser för att undvika att duplicera kod. Interface är ett löfte om metoder
        som klassen ska erbjuda. Interffacets metoder måste alltså finnas i klassen. 

        Jag har kämpat med att få till klasser men framför allt metoder för att skapa den kod som behövs när man 
        jobbar i ett namespace. Annars har det gått bra att jobba med Symfony. 
    </p>
    
    <h2 id="kmom03">kmom03</h2>
    <p>
        Jag tyckte det var rätt bra att tänka igenom lösningen innan jag började men jag tycker alltid att
        det är svårt att veta när man ska sluta tänka och börja göra. Det är mycket som faller på plats när 
        man får in det i de rätta filerna och ser vad man har framför sig. Det kan också bli knepigt när man måste 
        tänka om totalt i en lösning för att en idé inte fungerade som man hade tänkt. Jag tycker också att man alltid 
        måste hålla tillbaka när man skriver psuedokod för man tänker alltid i fullständig kod som ska fungera att köra. 

        Min lösning bygger på att använda de tidigare klasserna Card, DeckOfCards och CardHand för att sedan implementera
        Player och Game. Där Player både kan användas för spelare och banken och game är en komposition av Player med första
        elementet [0] som banken och det andra [1] som spelaren. Det skulle om man vill utveckla banken kanske vara bra 
        att ha den som en egen klass för att skapa mer avanserade metoder men i detta enkla skedet så fungerar det bra.
        Dock finns det säkert kod som skulle kunna förvaras i klasserna för att göra det enklare att utveckla. Jag är ändå
        nöjd att jag inte gjorde det mer komplicerat som jag egentligen hade tänkt. 

        Det går bra att koda med Symfony men det känns som om det som symfony tar hand om är saker som man själv inte har
        kontroll över längre. Man måste på något sätt veta vad symfony gör bakom scenen för att känna att man vet vad som händer.
        Min TIL är att saker som sparas i sessionen returneras med typen mixed.
    </p>
    
    <h2 id="kmom04">kmom04</h2>
    <p> Jag tycker det har varit roligt att testa koden som jag har skrivit. Det har gått bra att jobba med 
        phpunit. Inga konstigeter. Kan dock känna att den inte bryr sig om testet är värdefullt eller inte. 
        Det går i vissa fall att skapa bra kodtäckning som egentligen inte gör så mycket. Att koden har luckor
        ändå, trots testningen. Jag tycker att det som gav mest egentligen var att man fick bättre koll på sin 
        egen kod. Jag förstod till exempel att jag hade kod som jag inte använder mig av.

        Jag lyckades komma upp i hög kodtäckning. Det enda som bara var 90% var getSuitIndex(). Det beror på att
        jag inte kan ha en else-sats då det är onödigt enligt kodstandard. När jag tog bort else satasen, så behövs
        en return sats i slutet för att metoden inte ska kunna köras utan att returnera något. När jag sedan ska testa
        den kodraden så måste jag skapa ett kort som inte har en av de fyra färgerna. Det gör att phpunit ger varningen
        "remaining self deprecation notices". Resultatet är att det inte går att skapa ett testfall för den raden
        då koden kommer att säga ifrån innan med att du använt ett ogiltigt index till suits[] arrayen. Så att det inte testas
        gör inte så mycket då fallet aldrig kommer att inträffa. 

        Det finns många förbättringar som jag skulle kunna göra för mer testbar kod men den som sticker ut mest är nog 
        att skapandet av en kortlek (deckOfCards) börjar med att man manuelt behöver lägga in 52 tomma kort för att sedan
        hämta en fullständig kortlek med de 52 olika korten. 

        Jag tycker att man känner att ju enklare kod detsto enklare är den att testa. Enklare kod innebär ofta
        färre rader kod och det blir ju färre rader som ska testas. Så fort mina metoder drog iväg i längd så blev det
        jobbigare att testa dem. Oftast är snygg kod kort och gör inget mer än den behöver. Dock kan kort kod ibland
        vara svårläst om den försöker göra för mycket i en rad. 

        Min TIL blir att skriva kodtester inte bara ser till att koden fungerar som den ska men också hjälper 
        till att öka värdet på enkel kod. 
    
    </p>
    
    <h2 id="kmom05">kmom05</h2>
    <p>
        Det gick bra att jobba igenom övningnen med Symfony och doctrine. Det är trevligt när saker fixas av sig
        själv men det blir alltid så att det går åt tid att fixa så att det fungerar. Jag har inte haft några problem
        dock reagerar man på att koden som genererades inte gick igenom phpmd. När jag gjorde applikationen så
        tänkte jag mycket på att den skulle vara trevlig att använda. Det skulle finnas länkar dit man ville och att 
        när man genomförde en aktion skulle man hamna på ett logiskt ställe. 
        
        Till exempel så när man tog bort böcker
        hade jag först att man hamnade på visa-alla-böcker-sidan så att man kunde se att boken hade försvunnit. När jag själv
        skulle radera ett antal böcker insåg jag att det var irriterande att behöva klicka sig tillbaka till delete-sidan
        när jag skulle radera nästa bok. Därför ändrade jag så att man hamnade där istället. För min del så har hela 
        databasdelen varit smidig och jag tycker att det har blivit mindre jobb och kod att skriva. Hela objektorienterade
        sidan kod är ju att uppskattas då det ger en härlig struktur på koden. Det som då blir nackdelen är att man måste 
        in i det objektorienterade systemet och det kan vara enklare att enkelt göra det själv särskilt i små projekt.
        Jag är possitivt inställd till att jobba i ORM och har funnit det smidigare än andra sätt dock bör kanske nämnas 
        att jag gjort mycket mer på de andra sätten så det kanske är lite orättvist att jämföra. Min TIL är att det är 
        ogilltig html kod att göra en hel tabellrad till en klickbar rad. 
    </p>
    
    <h2 id="kmom06">kmom06</h2>
    <p>
        Jag tyckte om prickarna i phpmetrics då de visade väldigt tydiligt var de problematiska delarna av
        koden fanns. Sedan gick alla värden att se och vilka som stack ut var tydligt. Dock var det svårt att se vad som faktiskt gjorde att
        vi fick de utstickande värden och alla förkortningar var lite otydliga när man bara tittade på sidan utan att 
        kolla upp dem. Det gick inte riktigt att skapa sig en klar bild i huvudet på vad de innebar för koden. 

        Jag tyckte att scrutinizer hade väldigt tydligt och översiktiligt många olika mätvärden och det gick att klicka 
        sig in och se mer utförligt på vad i koden det handlade om. Jag hade 9.7 i kodkvalitet och 21% i kodtäckning i min 
        första build. Badges ger ett väldigt tydligt mått på hur läget är i koden men djupare analys krväs alltid. 

        Jag tycker kodkvalitet har ett gott syfte och fungerar bra för att utveckla kod. Det blir alltid så att man förlitar sig på siffor på gott och ont men
        att skapa kvalitativ kod hjälper för underhåll och utbyggnad av kod. Badges kommer alltid att vara limiterade. Det är lätt att
        se att allt är grönt och tänka att allt är bra men de ger bara en översiktlig syn. Du måste alltid tänka på 
        vad för begränsningar som finns med de mätvärden som badges visar och djupdyka där du ser brister. 

        Min TIL är att fixa ett mätvärde kan påverka och eller förstöra andra.
    </p>
    
    <h2 id="kmom07">kmom07</h2>
    <p>

    Jag valde att implementera ett spel som bygger på att hitta kakan. Utifrån det gjorde jag ett
    svart vitt team för att skapa lite spänning, lite som ett spökhus liknande tema. Det kändes som 
    passande för spelet. Jag skapade 5 rum i huset (entrén, biblioteket, vardagsrummet, hallen, och det 
    hemliga rummet). Sedan blev det ju också en vinst-sida och som instruerat en första sida. Jag fixade 
    en ryggsäck och ett antal 4 olika objekt (äpple, bok, lapp, nyckel) och alla skulle gå att äta, läsa 
    eller ge bort. Även om man inte kunde äta böcker eller läsa äpplen utan bara fick felmeddelanden. Jag
    valde att skapa en objektklass (Item) och en ryggsäck (Backpack) som en komposition av Item. Varje Item
    hade som klassvariabler några olika strängar. De var ett namn, printtext vid ätande, läsande och givande av
    de olika objekten. För det mesta så var texterna samma vid de olika aktionerna. Jag valde att ha ryggsäcken
    på skärmen hela tiden och att det alltid gick att klicka på de olika aktionerna med knappar. Sedan hade jag
    en meddelande ruta på andra sidan för att ge lite extra information till spelaren. 

    För dokumentationen så fixade jag till min README-fil la till scrutinizer badges för det här projektet men
    valde även att ha kvar de gamla tydligt markerade vilka som var vilka. Jag anävnde mig av php-unit för att 
    se till att klasserna fick 100% i kodtäckning. 
    </p>

    <p>
    Jag tycket det var rätt enkelt för att det var rätt roligt att skapa ett spel. Jag såg hela spelet framför mig
    från början och behövde bara implementera det och anpassa det efter vad jag kunde göra i kodväg. Jag tyckte nog
    att det jag hade svårast med att tänka ut var hur ryggsäcken skulle fungera men det gick okej. Jag tycker det var
    rimligt projekt till kursen.   
    </p>

    <p>
        Jag tycker att det har varit en rolig kurs och jag är nöjd med den. Jag hade rekommenderat den 
        till folk som jag tror skulle vara intresserade. 8/10. Det första jag skulle se till är att bättre
        förklara varför kursen heter mvc (vad mvc står för) och vad det innebär så att man har bättre översikt 
        på vad kursen handlar om. Det var några gånger som jag kände att vi gick igenom saker i ett kursmoment 
        för att behöva det i nästa vilket var lite förvirrande. Jag tycker annars att genomgångar och uppgifter 
        har varit roliga och lärorika ibland lite frustrerande att skapa ett json api med samma funktion som du 
        redan gjort i den tidigare delen av uppgiften.   
    </p>

    
    </div>

{% endblock %}
