{% extends "base.html.twig" %}

{% block title %}REPORTS{% endblock %}

{% block body %}
    <div class=blocky>
    <h1> Report page </h1>
    <h2 id="kmom01">kmom01</h2>
    <p>
        Jag har gjort rätt mycket objektorienterad programmering i andra programmeringsspråk tidigare, bl.a. i C språk
        Jag har även jobbat med klasser i python. Så grunden med klasser har jag koll på. 

        För att jobba med klasser och objekt måste man förstå skillnaden mellan public, private och protected. Där public 
        gör funktioner och variabler tillgängliga utanför klassen vilket också gör dem sårbara. I private kan de bara accessas
        inuti klassen. Då är de säkra från förändringar som kommer utanför klassen. Om en variabel inte har korrekt värde 
        så vet man att den har ändras ifrån klassen och det gör det lättare att felsöka men chansen att det händer har också 
        reducerats. Med protected så finns de tillgängliga till andra klasser genom arv men då inte helt åtkommliga då de måste
        vara sammankopplade via arv. Det kan också vara bra att ha koll på autoloader. Den kan användas istället för require
        och invlude för att göra saker åtkommliga när det behövs. Konstruktorer är också bra att ha koll på då vi kan 
        skapa instanser av klasser enkelt och smidigt med hjälp av dem. 

        För någon som tycker om språk och grammtik tycker jag att delen i "PHP the right way" om internationalization och localization
        var intressant. Hur man gör för att skapa kod som enkelt kan översättas och fungera i olika mänskliga spårk med
        olika strukturer och helt skild grammatik.

        Koden och strukturen till uppgiften har varit förvirrande tycker jag. Det är möjligt att jag inte haft helt tillräckligt
        med tid för att förstå den då det krånglade med php installationen för mig. Jag vet med mig att det brukar ta ett tag innan 
        man är bekväm i nya miljöer. 

        Min TIL är att det är bra att hålla koll på kodstrukturen innan man börjar skapa filer. 
    </p>
    
    <h2 id="kmom02">kmom02</h2>
    <p>
        Min lösning består av 4 klasser, ett arv och två kompositioner. Jag gjorde först kort med ascii symboler för
        klöver, hjärter, spader och ruter och deras värden med A som ess, J som knekt, Q som dam och K som kung
        och resterande som siffort. Sedan gjorde jag setValue() och setSuit för att få random kort men sedan detValue()
        och detSuit() för att skapa specifika kort som sedan användes för att skapa en fullständig kortlek. Jag sammankopplade
        en shuffle som går igenom alla positioner i arrayen och byter plats med ett random annan position i arrayen. Sedan skapade 
        jag en sort() funktion som är en klassisk bubble sort för att sortera korten. Jag gjorde sedan en draw card och en draw card many
        som drar kort från början av leken. För att ta bort kort ur leken ersattes dem med tomma kort. Sedan skapade jag 
        Graphic card som har ascii symboler för hela kort. 

        Förbättringar skulle vara att kunna ta bort kort från arrayen helt inte bara ersätta dem och sedan finns
        det bättre sorteringsmetoder än bubble sort även fast det kankse inte spelar så stor roll när kortleken 
        aldrig överstiger 52 kort som ska sorteras. 

        Min TIL är att det går att kopiera in alla ascii symboler i VS code istället för att använda deras koder.

        Arv betyder att en klass får alla egenskaper från klassen den ärver från och kan skapa egna egenskaper för 
        att utöka den ursprungliga klassen. Komposition är en samling objekt från en annan klass som då hör ihop. Trait
        är en samlig kod som kan användas i flera klasser för att undvika att duplicera kod. Interface är ett löfte om metoder
        som klassen ska erbjuda. Interffacets metoder måste alltså finnas i klassen. 

        Jag har kämpat med att få till klasser men framför allt metoder för att skapa den kod som behövs när man 
        jobbar i ett namespace. Annars har det gått bra att jobba med Symfony. 
    </p>
    
    <h2 id="kmom03">kmom03</h2>
    <p>
        Jag tyckte det var rätt bra att tänka igenom lösningen innan jag började men jag tycker alltid att
        det är svårt att veta när man ska sluta tänka och börja göra. Det är mycket som faller på plats när 
        man får in det i de rätta filerna och ser vad man har framför sig. Det kan också bli knepigt när man måste 
        tänka om totalt i en lösning för att en idé inte fungerade som man hade tänkt. Jag tycker också att man alltid 
        måste hålla tillbaka när man skriver psuedokod för man tänker alltid i fullständig kod som ska fungera att köra. 

        Min lösning bygger på att använda de tidigare klasserna Card, DeckOfCards och CardHand för att sedan implementera
        Player och Game. Där Player både kan användas för spelare och banken och game är en komposition av Player med första
        elementet [0] som banken och det andra [1] som spelaren. Det skulle om man vill utveckla banken kanske vara bra 
        att ha den som en egen klass för att skapa mer avanserade metoder men i detta enkla skedet så fungerar det bra.
        Dock finns det säkert kod som skulle kunna förvaras i klasserna för att göra det enklare att utveckla. Jag är ändå
        nöjd att jag inte gjorde det mer komplicerat som jag egentligen hade tänkt. 

        Det går bra att koda med Symfony men det känns som om det som symfony tar hand om är saker som man själv inte har
        kontroll över längre. Man måste på något sätt veta vad symfony gör bakom scenen för att känna att man vet vad som händer.
        Min TIL är att saker som sparas i sessionen returneras med typen mixed.
    </p>
    
    <h2 id="kmom04">kmom04</h2>
    <p></p>
    
    <h2 id="kmom05">kmom05</h2>
    <p></p>
    
    <h2 id="kmom06">kmom06</h2>
    <p></p>
    
    <h2 id="kmom07">kmom07</h2>
    <p></p>
    
    </div>

{% endblock %}
